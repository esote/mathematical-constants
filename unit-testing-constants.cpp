#define CATCH_CONFIG_MAIN

#include <boost/multiprecision/cpp_dec_float.hpp> // boost::multiprecision
#include <catch/catch.hpp>
#include <map> // std::map
#include <utility> // std::pair

#include "constants.hpp"

struct t_fixture {
	typedef boost::multiprecision::number<
		boost::multiprecision::cpp_dec_float<100> > arb;

	constexpr static unsigned rounding_error = 2u;
};

TEST_CASE_METHOD(t_fixture, "Simple constants", "[accurate 100]") {
	// i, one, zero
	std::stringstream buf_i;
	buf_i << constant::i<arb>();

	REQUIRE("(0,1)" == buf_i.str());
	REQUIRE(static_cast<arb>(1) == constant::one<arb>());
	REQUIRE(static_cast<arb>(0) == constant::zero<arb>());
}

TEST_CASE_METHOD(t_fixture, "Static constants", "[accurate 100]") {
	const std::map<const std::string, std::string> static_constants {
		{"1.2020569031595942853997381615114499907649862923404988817922715553418382057863130901864558736093352581",
			static_cast<std::string>(constant::aperys<arb>())},
		{"0.6366197723675813430755350534900574481378385829618257949906693762355871905369061403604552110650123438",
			static_cast<std::string>(constant::buffons<arb>())},
		{"0.9159655941772190150546035149323841107741493742816721342664981196217630197762547694793565129261151062",
			static_cast<std::string>(constant::catalans<arb>())},
		{"1.2599210498948731647672106072782283505702514647015079800819751121552996765139594837293965624362550942",
			static_cast<std::string>(constant::delian<arb>())},
		{"2.7182818284590452353602874713526624977572470936999595749669676277240766303535475945713821785251664274",
			static_cast<std::string>(constant::e<arb>())},
		{"1.6066951524152917637833015231909245804805796715057564357780795536914184207434866905657118016701555759",
			static_cast<std::string>(constant::erdos_borwein<arb>())},
		{"0.5772156649015328606065120900824024310421593359399235988057672348848677267776646709369470632917467495",
			static_cast<std::string>(constant::euler_mascheroni<arb>())},
		{"2.6651441426902251886502972498731398482742113137146594928359795933649204461787059548676091800051964169",
			static_cast<std::string>(constant::gelfond_schneider<arb>())},
		{"23.1406926327792690057290863679485473802661062426002119934450464095243423506904527835169719970675492197",
			static_cast<std::string>(constant::gelfonds<arb>())},
		{"1.0149416064096536250212025542745202859416893075302997920174891067765974762582440221364703542282566949",
			static_cast<std::string>(constant::giesekings<arb>())},
		{"1.2824271291006226368753425688697917277676889273250011920637400217404063088588264611297364919582023743",
			static_cast<std::string>(constant::glaisher_kinkelin<arb>())},
		{"1.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374",
			static_cast<std::string>(constant::golden_ratio<arb>())},
		{"0.6180339887498948482045868343656381177203091798057628621354486227052604628189024497072072041893911374",
			static_cast<std::string>(constant::inverse_golden_ratio<arb>())},
		{"2.6854520010653064453097148354817956938203822939944629530511523455572188595371520028011411749318476980",
			static_cast<std::string>(constant::khinchin<arb>())},
		{"1.1865691104156254528217229759472371205683565364720543359542542986528096320562544433003483011084868759",
			static_cast<std::string>(constant::khinchin_levy<arb>())},
		{"-0.1654211437004509292139196602427806427640363803352017836665223063573596996665771727595251003325087555",
			static_cast<std::string>(constant::kinkelin<arb>())},
		{"0.2113248654051871177454256097490212721761991243649365619906988367580111638485333271531423022071252374",
			static_cast<std::string>(constant::knuth<arb>())},
		{"3.2758229187218111597876818824538438636084755259823741494051989241907232156449603551812775404791745295",
			static_cast<std::string>(constant::levys<arb>())},
		{"1.5396007178390020386910634146718865483936046700536716693829395372906071261411555885165743882286654006",
			static_cast<std::string>(constant::liebs<arb>())},
		{"0.9702701143920339257402560192100108337812847047851612866103505299312541998917370480362126749080290264",
			static_cast<std::string>(constant::lochs<arb>())},
		{"0.0653514259230373213787826267631079308130245368494237976590714496815770758054319949469420687163645589",
			static_cast<std::string>(constant::nortons<arb>())},
		{"0.5671432904097838729999686622103555497538157871865125081351310792230457930866845666932194469617522945",
			static_cast<std::string>(constant::omega<arb>())},
		{"3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170680",
			static_cast<std::string>(constant::pi<arb>())},
		{"1.3247179572447460259609088544780973407344040569017333645340150503028278512455475940546993479817872803",
			static_cast<std::string>(constant::plastic_number<arb>())},
		{"2.5118864315095801110850320677993273941585181007824754286798884209082432477235613084538510088777969592",
			static_cast<std::string>(constant::pogsons<arb>())},
		{"0.3405373295509991428262731844329028967106082171243020977632361053777919694589623846425280818890571309",
			static_cast<std::string>(constant::polyas_random_walk<arb>())},
		{"1.4670780794339754728977984847072299534499033224148877773996858176166067443290448084303693275111740152",
			static_cast<std::string>(constant::porters<arb>())},
		{"1.0606601717798212866012665431572735589272539065327110548825098034930493588465802791377906507457311796",
			static_cast<std::string>(constant::prince_ruperts_cube<arb>())},
		{"1.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727",
			static_cast<std::string>(constant::pythagoras<arb>())},
		{"0.6617071822671762351558311332484135817464001357909536048089442294795846461385976313066524807681071201",
			static_cast<std::string>(constant::robbins<arb>())},
		{"2.4142135623730950488016887242096980785696718753769480731766797379907324784621070388503875343276415727",
			static_cast<std::string>(constant::silver_ratio<arb>())},
		{"1.7320508075688772935274463415058723669428052538103806280558069794519330169088000370811461867572485757",
			static_cast<std::string>(constant::theodorus<arb>())},
		{"2.5980762113533159402911695122588085504142078807155709420837104691778995253632000556217192801358728635",
			static_cast<std::string>(constant::twenty_vertex_entropy<arb>())},
		{"0.0072973481300318321289569226013163772382335922546677925988015401933154990866203162228274976091740372",
			static_cast<std::string>(constant::wylers<arb>())}
	};

	for(auto p : static_constants) {
		std::string first = p.first;
		first.resize(p.first.length() - rounding_error - 1);
		p.second.resize(p.second.find('.') + std::numeric_limits<arb>::digits10 - rounding_error);
		REQUIRE(first == p.second);
	}
}

TEST_CASE_METHOD(t_fixture, "Imprecise constants", "[accurate 100]") {
	// unsigned value is additional rounding error
	const std::map<std::pair<const unsigned, const std::string>, std::string> imprecise_constants = {
		{{1, "0.8093940205406391307179318805940913172159539924250003042420287150429990125165473223115184078197236169"},
			static_cast<std::string>(constant::alladi_grinstead<arb>())},
		{{1, "0.8346268416740731862814297327990468089939930134903470024498273701036819927095264118696911603512753241"},
			static_cast<std::string>(constant::gauss<arb>())},
		{{3, "1.7052111401053677642885514534345081607620276516534690999942849065473131921681224919342441321008710018"},
			static_cast<std::string>(constant::niven<arb>())},
		{{2, "2.5849817595792532170658935873831711600880516518526309173215449879719320440011571202111177245270642830"},
			static_cast<std::string>(constant::sierpinski_k<arb>())},
		{{1, "0.8228252496788470329953287162614649494756931188948502183938156130370909564464016675721953257323445324"},
			static_cast<std::string>(constant::sierpinski_s<arb>())},
		{{1, "0.4749493799879206503325046363279829685595493732172029822833310248645579291748838602742756412505021444"},
			static_cast<std::string>(constant::weierstrass<arb>())}
	};

	for(auto p : imprecise_constants) {
		std::string first = p.first.second;
		first.resize(p.first.second.length() - rounding_error - 1 - p.first.first);
		p.second.resize(p.second.find('.') + std::numeric_limits<arb>::digits10 - rounding_error - p.first.first);
		REQUIRE(first == p.second);
	}
}

TEST_CASE_METHOD(t_fixture, "Nonstatic constants", "[accurate 100]") {
	// champernowne, favard
	const std::map<const std::string, std::string> nonstatic_constants {
		// champernowne
		{"0.8622401258680545715577902832493945785657647427682990945160712145573067405905164580420384414386181334",
			static_cast<std::string>(constant::func::champernowne<arb>(2))},
		{"0.5989581675384339925001722179294365909782087686761059367547860754796518419528084205540721108052796416",
			static_cast<std::string>(constant::func::champernowne<arb>(3))},
		{"0.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253546",
			static_cast<std::string>(constant::func::champernowne<arb>(10))},
		{"0.0208246563931695127030403998334027488546438983756768013327780091628488129945855893321418307156739572",
			static_cast<std::string>(constant::func::champernowne<arb>(50))},
		// favard
		{"1.5707963267948966192313216916397514420985846996875529104874722961539082031431044993140174126710585340",
			static_cast<std::string>(constant::func::favard<arb>(1))},
		{"1.2337005501361698273543113749845188919142124259050988283016686720275056028024006553752216754648190290",
			static_cast<std::string>(constant::func::favard<arb>(2))},
		{"1.2732323827293948495082797108893581870417150275326354716717262324025441563881021226349392629802358151",
			static_cast<std::string>(constant::func::favard<arb>(10))},
		{"1.2732395447351626861510695157914100206986199598982803503419998050597732615558975419699755389707566963",
			static_cast<std::string>(constant::func::favard<arb>(50))}
	};

	for(auto p : nonstatic_constants) {
		std::string first = p.first;
		first.resize(p.first.length() - rounding_error - 1);
		p.second.resize(p.second.find('.') + std::numeric_limits<arb>::digits10 - rounding_error);
		REQUIRE(first == p.second);
	}

	REQUIRE(static_cast<arb>(1) == constant::func::favard<arb>(0));
}
